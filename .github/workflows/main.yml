name: Build and test the package
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  package:
    runs-on: ubuntu-latest
    steps:
    - name: Retrieve the source code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install build dependencies
      run: |
        conda config --append channels conda-forge
        conda install -y conda-build conda-verify flake8 sphinx numpydoc sphinxcontrib-autoprogram make
        /usr/share/miniconda/bin/python -m pip install -e .
    - name: Verify flake8 compliance
      run: |
        source /usr/share/miniconda/bin/activate
        flake8 conda_pack
    - name: Build the docs as a test
      run: |
        source /usr/share/miniconda/bin/activate
        cd docs
        make html
    - name: Build the package
      run: conda build conda-recipe --no-test
    - name: Reduce the size of the build artifact
      run: rm -rf /usr/share/miniconda/conda-bld/{git_cache,work,conda-pack*,*/.cache}
    - name: Upload the build artifact
      uses: actions/upload-artifact@v2
      with:
        name: package-${{ github.sha }}
        path: /usr/share/miniconda/conda-bld
  testbed:
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest,windows-latest]
    steps:
    - name: Retrieve the source code
      uses: actions/checkout@v2
    - id: cache
      name: Retrieve or create the conda cache
      uses: actions/cache@v2
      with:
        path: conda
        key: testbed-${{ matrix.os }}-${{ hashFiles('testing') }}
    - name: Set CONDA_ROOT
      run: |
        # Conda should be on the same filesystem as GITHUB_WORKSPACE. For Windows,
        # this disqualifies HOME. On the other hand, for macOS, GITHUB_WORKSPACE is
        # not the same from job to job for some reason. So the predictability of
        # HOME is a better choice. So two solutions are needed, unfortunately.
        [ "$RUNNER_OS" == "Windows" ] && CONDA_ROOT="${GITHUB_WORKSPACE%\\*}\\conda"
        [ "$RUNNER_OS" != "Windows" ] && CONDA_ROOT="$HOME/conda"
        echo "::set-env name=CONDA_ROOT::${CONDA_ROOT}"
        echo "CONDA_ROOT: $CONDA_ROOT"
    - name: Move conda out of the cache and into position
      if: steps.cache.outputs.cache-hit == 'true'
      run: mv $GITHUB_WORKSPACE/conda $CONDA_ROOT && ls -ld $CONDA_ROOT
    - name: Create the root environment
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        # Don't use the built-in conda because we need the package cache
        [ "$RUNNER_OS" == "Windows" ] && MOS=win
        [ "$RUNNER_OS" == "macOS"   ] && MOS=osx
        [ "$RUNNER_OS" == "Linux"   ] && MOS=linux
        curl -o conda.exe -O https://repo.anaconda.com/pkgs/misc/conda-execs/conda-latest-${MOS}-64.exe
        [ "$RUNNER_OS" == "Windows" ] || chmod +x conda.exe
        ./conda.exe create -p $CONDA_ROOT conda
        source $CONDA_ROOT/etc/profile.d/conda.sh
        conda info -a
    - name: Create the test environments
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        source $CONDA_ROOT/etc/profile.d/conda.sh
        conda activate base
        export CONDA_PACK_TEST_ENVS=$CONDA_ROOT/envs
        bash testing/setup_envs.sh
        conda info --envs
    - name: Move the conda testbed into cache position
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        # Move the conda installation into GITHUB_WORKSPACE to be cached.
        # Unfortunately actions/cache cannot yet be relied on to cache content
        # outside of GITHUB_WORKSPACE, so we have to jump through this hoop
        # here, and the reverse in the tests below.
        rm -rf ./conda
        mv $CONDA_ROOT ./conda
        rm -rf ./conda/conda-bld
        ls -l ./conda
  tests:
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    needs: [package,testbed]
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest,ubuntu-latest,windows-latest]
        pyver: [3.6,3.7,3.8,2.7]
    steps:
    - name: Retrieve the source code
      uses: actions/checkout@v2
    - name: Retrieve the conda cache
      uses: actions/cache@v2
      with:
        path: conda
        key: testbed-${{ matrix.os }}-${{ hashFiles('testing') }}
    - name: Set CONDA_ROOT
      run: |
        [ "$RUNNER_OS" == "Windows" ] && CONDA_ROOT="${GITHUB_WORKSPACE%\\*}\\conda"
        [ "$RUNNER_OS" != "Windows" ] && CONDA_ROOT="$HOME/conda"
        echo "::set-env name=CONDA_ROOT::${CONDA_ROOT}"
        echo "CONDA_ROOT: $CONDA_ROOT"
    - name: Move conda out of the cache and into position
      run: |
        mv ./conda $CONDA_ROOT
        ls -l $CONDA_ROOT
    - name: Download the build artifact
      uses: actions/download-artifact@v2
      with:
        name: package-${{ github.sha }}
        path: conda-bld
    - name: Move the build artifact into place
      run: |
        find conda-bld -print
        mv conda-bld $CONDA_ROOT
    - name: Create the test environment
      run: |
        source $CONDA_ROOT/etc/profile.d/conda.sh
        conda create -n cptest local::conda-pack pytest python=${{ matrix.pyver }}
        conda list -n cptest
    - name: Run the tests
      run: |
        source $CONDA_ROOT/etc/profile.d/conda.sh
        conda activate cptest
        export CONDA_PACK_TEST_ENVS=$CONDA_ROOT/envs
        pytest -v -ss conda_pack/tests
